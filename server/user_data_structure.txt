{<user>: {
		 'password': <password>,
		 'server_timestamp': <timestamp>,
		 'files': {<path>: (<timestamp>, <md5>),
		 		   <path>: (<timestamp>, <md5>),
		 		 ...
		 		 },
		 'shared_to_others':{<path>:[<user>,<user>,<user>,...],
		  					  <path>:[<user>,<user>,<user>,...],
		  					  ...

		  					 },
		 'shared_with_me':{<user>: [<path>, <path>, ...],
		  		 			<user>: [......],
		  		 		   },
		 },

 <user>: {
			...	 		 
		},


}

User Signup: when a new user subscribes the service, the user_data_structure is added at the user_list in memory and appended to the users/userdata.json file. Its server_timestamp is initialized at the user creation time, and its files dictionary is empty.

Server Start: if exists, the file users/userdata.json is loaded in memory as user_list, otherwise it is created and initialized (empty).

Server Shutdown: for each user in the user_list the server_timestamp and files are "dumped" to the userdata.json file.

Actions:

	-upload a file (post files/): adds a new record {<path>: (<timestamp>, <md5>)} in memory to user_list.files, updates user_list.server_timestamp and updates userdata.json with new server_timestamp.

	-delete a file (put actions/): deletes the record from user_list.files, updates user_list.server_timestamp and updates userdata.json with new server_timestamp.

	-move a file (put actions/): deletes the moved record from user_list.files, adds a new record {<path>: (<timestamp>, <md5>)} in memory to user_list.files, updates user_list.server_timestamp and updates userdata.json with new server_timestamp.
	
	-copy a file (put actions/): adds a new record {<path>: (<timestamp>, <md5>)} in memory to user_list.files, updates user_list.server_timestamp and updates userdata.json with new server_timestamp.





